# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on Linux GNU and Clang

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [ubuntu-24.04, ubuntu-24.04-arm]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch full history for tags, branches, etc.
          submodules: recursive # initialize & update all submodules, including nested ones

      - name: Install deps
        run: |
          # wget https://apt.llvm.org/llvm.sh
          # chmod +x llvm.sh
          # sudo ./llvm.sh all
          sudo apt-get install llvm
          chmod +x scripts/prepare_tooling.sh
          ./scripts/prepare_tooling.sh

      - name: Install gcovr
        run: |
          gcov --version
          which gcov
          pip install gcovr

      - name: Install latest CMake
        run: |
          # 1. Remove any manually installed CMake binary
          which cmake
          sudo rm -f /usr/local/bin/cmake
          # Remove any existing CMake to avoid conflicts
          sudo apt-get purge --auto-remove -y cmake        # recommended to ensure a clean install:contentReference[oaicite:1]{index=1}

          # Prepare for adding the Kitware APT repository
          sudo apt-get update                              # refresh package index:contentReference[oaicite:2]{index=2}
          sudo apt-get install -y wget gpg lsb-release ca-certificates  # prerequisites for secure APT repos:contentReference[oaicite:3]{index=3}

          # Import Kitware’s signing key and add the “noble” repo
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] \
            https://apt.kitware.com/ubuntu/ noble main" \
            | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null  # Ubuntu 24.04 support confirmed:contentReference[oaicite:4]{index=4}

          # Install the newest CMake available from Kitware
          sudo apt-get update                              # pick up the new repository:contentReference[oaicite:5]{index=5}
          sudo apt-get install -y cmake                     # installs the latest upstream release:contentReference[oaicite:6]{index=6}

          # 5. Add the APT-installed CMake directory to PATH
          echo "/usr/bin" >> $GITHUB_PATH                          # prepend /usr/bin so 'cmake' resolves to the APT version :contentReference[oaicite:2]{index=2}
            
          # Verify the installation
          cmake --version

      ######################################
      ###### Now run everything with GNU GCC
      ######################################

      - name: Configure CMake with GCC
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build --preset "linux-debug-GNU"

      - name: Build
        # Build your program with the given configuration
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)   # Linux: number of cores
          # for running a CICD Job enabling cache would be a foolish thing to do
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test with GCC
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{env.BUILD_TYPE}}
          gcovr -r .
          ls ${{github.workspace}}/build

      - name: Run performance benchmarks with GCC
        run: |
          # chmod +x ${{github.workspace}}/build/perfTestSuite 
          ${{github.workspace}}/build/perfTestSuite

      - name: Run GProf
        run: |
          cd build
          ./KataglyphisCppProject
          gprof KataglyphisCppProject gmon.out > profile.txt

      - name: Run fuzzer tests with GCC
        run: |
          # chmod +x ${{github.workspace}}/build/first_fuzz_test
          ${{github.workspace}}/build/first_fuzz_test

      - name: Run clang tidy
        run: clang-tidy -p=./build/compile_commands.json  $(find Src -name '*.cpp' -o -name '*.cc')

      ####################################
      ###### Now run everything with clang
      ####################################

      - name: Prepare for clang
        run: |
          sudo rm -r ${{github.workspace}}/build
          which clang 
          clang --version

      - name: Configure CMake with Clang
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build --preset "linux-profile-clang"

      - name: Build
        # Build your program with the given configuration
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)   # Linux: number of cores
          # for running a CICD Job enabling cache would be a foolish thing to do
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{env.BUILD_TYPE}}
          /usr/bin/llvm-profdata merge -sparse ${{github.workspace}}/build/Test/compile/default.profraw -o ${{github.workspace}}/build/compileTestSuite.profdata
          /usr/bin/llvm-cov report ${{github.workspace}}/build/compileTestSuite -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata
          /usr/bin/llvm-cov export ${{github.workspace}}/build/compileTestSuite -format=text -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata > ${{github.workspace}}/build/coverage.json

      - name: Run performance benchmarks
        run: |
          # chmod +x ${{github.workspace}}/build/perfTestSuite 
          ${{github.workspace}}/build/perfTestSuite

      - name: Run LLVM Source based Code Coverage
        run: |
          cd build
          LLVM_PROFILE_FILE="${{github.workspace}}/build/dummy.profraw" ./KataglyphisCppProject
          /usr/bin/llvm-profdata merge -sparse ${{github.workspace}}/build/dummy.profraw -o ${{github.workspace}}/build/dummy.profdata
          /usr/bin/llvm-cov show ./KataglyphisCppProject -instr-profile=${{github.workspace}}/build/dummy.profdata -format=text

      - name: Run GProf after clang compilation
        run: |
          cd build
          ./KataglyphisCppProject
          gprof KataglyphisCppProject gmon.out > profile.txt

      - name: Run fuzzer tests
        run: |
          # chmod +x ${{github.workspace}}/build/first_fuzz_test
          ${{github.workspace}}/build/first_fuzz_test
