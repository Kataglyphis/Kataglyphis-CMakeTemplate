name: Build and Test on Ubuntu 24.04 with x86/ARM arch and GCC Clang

on:
  workflow_call:
    inputs:
      compiler:
        required: true
        type: string
      runner:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.runner }} # Dynamically use input

    env:
      BUILD_TYPE: Debug

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get install -y llvm
          chmod +x scripts/prepare_tooling.sh
          ./scripts/prepare_tooling.sh

      - name: Install gcovr
        run: |
          gcov --version || true
          which gcov || true
          pip install gcovr

      - name: Install latest CMake
        run: |
          sudo apt-get purge --auto-remove -y cmake
          sudo apt-get update
          sudo apt-get install -y wget gpg lsb-release ca-certificates
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main" \
            | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          sudo apt-get install -y cmake
          echo "/usr/bin" >> $GITHUB_PATH
          cmake --version

      - name: Configure CMake
        run: |
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            cmake -B build --preset "linux-profile-GNU"
          else
            cmake -B build --preset "linux-profile-clang"
          fi

      - name: Build
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake --build build --config $BUILD_TYPE

      - name: Test
        working-directory: build
        run: |
          ctest -C $BUILD_TYPE
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            gcovr -r .
          else
            /usr/bin/llvm-profdata merge -sparse Test/compile/default.profraw -o compileTestSuite.profdata
            /usr/bin/llvm-cov report ./compileTestSuite -instr-profile=compileTestSuite.profdata
            /usr/bin/llvm-cov export ./compileTestSuite -format=text -instr-profile=compileTestSuite.profdata > coverage.json
          fi

      - name: Run performance benchmarks
        run: ./build/perfTestSuite

      - name: Run GProf
        run: |
          cd build
          ./KataglyphisCppProject
          gprof KataglyphisCppProject gmon.out > profile.txt

      - name: Run fuzzer tests
        run: |
          ./build/first_fuzz_test

      - name: Run clang tidy
        run: clang-tidy -p=./build/compile_commands.json  $(find Src -name '*.cpp' -o -name '*.cc')

      ####################################
      ###### Now run everything with clang
      ####################################

      - name: Prepare for clang
        run: |
          sudo rm -r ${{github.workspace}}/build
          which clang 
          clang --version

      - name: Configure CMake with Clang
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build --preset "linux-profile-clang"

      - name: Build
        # Build your program with the given configuration
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)   # Linux: number of cores
          # for running a CICD Job enabling cache would be a foolish thing to do
          cmake --build ${{github.workspace}}/build --preset "linux-profile-clang"

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{env.BUILD_TYPE}}
          /usr/bin/llvm-profdata merge -sparse ${{github.workspace}}/build/Test/compile/default.profraw -o ${{github.workspace}}/build/compileTestSuite.profdata
          /usr/bin/llvm-cov report ${{github.workspace}}/build/compileTestSuite -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata
          /usr/bin/llvm-cov export ${{github.workspace}}/build/compileTestSuite -format=text -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata > ${{github.workspace}}/build/coverage.json

      - name: Set up Python 3.11
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.11"
      # You can test your matrix by printing the current Python version
      - name: Setup python env
        run: |
          pip install -r requirements.txt

      - name: Build web page
        run: |
          cd docs
          make html

      - name: ðŸ“‚ Sync files to domain
        if: ${{ inputs.runner == 'ubuntu-24.04' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PW }}
          local-dir: "./docs/build/html/"

      - name: Run performance benchmarks
        run: |
          # chmod +x ${{github.workspace}}/build/perfTestSuite 
          ${{github.workspace}}/build/perfTestSuite

      - name: Run LLVM Source based Code Coverage
        run: |
          cd build
          LLVM_PROFILE_FILE="dummy.profraw" ./KataglyphisCppProject
          /usr/bin/llvm-profdata merge -sparse dummy.profraw -o dummy.profdata
          /usr/bin/llvm-cov show ./KataglyphisCppProject -instr-profile=dummy.profdata -format=text

      - name: Configure CMake for Release (Clang only)
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          cmake -B build-release --preset linux-release-clang

      - name: Build Release (Clang only)
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake --build build-release --config Release

      - name: Package (Clang only)
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          cmake --build build-release --target package
