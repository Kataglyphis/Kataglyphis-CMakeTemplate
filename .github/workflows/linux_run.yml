name: Build and Test on Ubuntu 24.04 with x86/ARM arch and GCC Clang

on:
  workflow_call:
    inputs:
      compiler:
        required: true
        type: string
      runner:
        required: true
        type: string    
    secrets:
      SERVER:
        required: true
      USERNAME:
        required: true
      PW:
        required: true

jobs:
  build:
    runs-on: ${{ inputs.runner }} # Dynamically use input

    env:
      COMPILER: ${{ inputs.compiler }}
      RUNNER: ${{ inputs.runner }}
      BUILD_TYPE: Debug
      BUILD_DIR: build
      BUILD_RELEASE_DIR: build-release
      GCC_DEBUG_PRESET: linux-debug-GNU
      CLANG_DEBUG_PRESET: linux-debug-clang
      GCC_PROFILE_PRESET: linux-profile-GNU
      CLANG_PROFILE_PRESET: linux-profile-clang
      CLANG_RELEASE_PRESET: linux-release-clang
      COVERAGE_JSON: coverage.json

    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      #################################################################################################################
      ######################################## Prepare deps ###########################################################
      #################################################################################################################
      - name: Install dependencies
        run: |
          chmod +x scripts/linux/setup-dependencies.sh
          ./scripts/linux/setup-dependencies.sh
          echo "/usr/bin" >> $GITHUB_PATH

      #################################################################################################################
      ############################## Run unit/integration/fuzzy/coverage/tests/static analyzers #######################
      #################################################################################################################
      - name: Configure/build CMake for Debug (select preset by compiler)
        run: |
          if [[ "${COMPILER}" == "gcc" ]]; then
            PRESET="${GCC_DEBUG_PRESET}"
          else
            PRESET="${CLANG_DEBUG_PRESET}"
          fi
          echo "Using preset: ${PRESET}"
          cmake -B "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${PRESET}"
          cmake --build "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${PRESET}"

      - name: Run Unit/Integration tests
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest -C $BUILD_TYPE --verbose --extra-verbose --debug -T test --output-on-failure

      - name: Run fuzzer tests
        run: |
          if [[ "${{ inputs.compiler }}" == "clang" ]]; then
            ./${{ env.BUILD_DIR }}/first_fuzz_test
          else
            echo "Compiled with GCC so no fuzz testing!"
          fi  

      - name: Build Code Coverage
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            gcovr -r .
          else
            llvm-profdata merge -sparse Test/compile/default.profraw -o compileTestSuite.profdata
            llvm-cov report ./compileTestSuite -instr-profile=compileTestSuite.profdata
            llvm-cov export ./compileTestSuite -format=text -instr-profile=compileTestSuite.profdata > ${{ env.COVERAGE_JSON }}
            llvm-cov show ./compileTestSuite -instr-profile=compileTestSuite.profdata
          fi

      - name: Codecov
        if: ${{ inputs.compiler == 'clang' && inputs.runner == 'ubuntu-24.04' }}
        uses: codecov/codecov-action@v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVERAGE_JSON }}
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: false

      - name: Run clang tidy
        run: clang-tidy -p=./${{ env.BUILD_DIR }}/compile_commands.json  $(find Src -name '*.cpp' -o -name '*.cc')

      - name: Run Clang static analysis (HTML)
        continue-on-error: true
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          # HTML output (correct flag form)
          clang++ --analyze -Xanalyzer -analyzer-output=html $(find Src -name '*.cpp' -o -name '*.cc')

      - name: Run Clang static analysis (scan-build)
        continue-on-error: true
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          mkdir -p scan-build-reports
          scan-build -o scan-build-reports cmake --build "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${CLANG_DEBUG_PRESET}"

      #################################################################################################################
      ############################# Now run on performance benchmarking/profiling #####################################
      #################################################################################################################
      - name: Configure/build CMake for Profiling (select preset by compiler)
        run: |
          if [[ "${COMPILER}" == "gcc" ]]; then
            PRESET="${GCC_PROFILE_PRESET}"
          else
            PRESET="${CLANG_PROFILE_PRESET}"
          fi
          echo "Using preset: ${PRESET}"
          cmake -B "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${PRESET}"
          cmake --build "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${PRESET}"

      - name: Run Instrumentation-based PGO Clang/LLVM
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          LLVM_PROFILE_FILE="dummy.profraw" ./KataglyphisCppProject
          llvm-profdata merge -sparse dummy.profraw -o dummy.profdata
          llvm-cov show ./KataglyphisCppProject -instr-profile=dummy.profdata -format=text
      
      - name: Run Callgrind measurements
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          valgrind --tool=callgrind ./KataglyphisCppProject

      - name: Run Perf measurements
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          perf record -F 99 --call-graph dwarf -- ./KataglyphisCppProject

      - name: Run performance benchmarks
        working-directory: ${{ env.BUILD_DIR }}
        run: ./perfTestSuite

      - name: Run GProf
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ./KataglyphisCppProject
          if [[ -f gmon.out ]]; then
            gprof KataglyphisCppProject gmon.out > profile.txt || true
          else
            echo "gmon.out not found, skipping gprof."
          fi

      #################################################################################################################
      ######################################## Build docs #############################################################
      #################################################################################################################
      - name: Set up Python 3.13
        if: ${{ inputs.runner == 'ubuntu-24.04' && inputs.compiler == 'clang' }}
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13"

      # You can test your matrix by printing the current Python version
      - name: Setup python env
        if: ${{ inputs.runner == 'ubuntu-24.04' && inputs.compiler == 'clang' }}
        run: |
          pip install -r requirements.txt

      - name: Build web page
        if: ${{ inputs.runner == 'ubuntu-24.04' && inputs.compiler == 'clang' }}
        run: |
          cd docs
          make html

      - name: ðŸ“‚ Sync files to domain
        if: ${{ inputs.runner == 'ubuntu-24.04' && inputs.compiler == 'clang' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PW }}
          local-dir: "./docs/build/html/"

      #################################################################################################################
      ################################### Now run release and build package for clang #################################
      #################################################################################################################

      - name: Prepare for clang release
        run: |
          sudo rm -r "${{ github.workspace }}/${{ env.BUILD_DIR }}"

      - name: Configure CMake with Clang
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          cmake -B "${{ github.workspace }}/${{ env.BUILD_RELEASE_DIR }}" --preset "${CLANG_RELEASE_PRESET}"
          cmake --build "${{ github.workspace }}/${{ env.BUILD_RELEASE_DIR }}" --preset "${CLANG_RELEASE_PRESET}"

      - name: Package (Clang only)
        if: ${{ inputs.compiler == 'clang' }}
        run: |
          cmake --build ${{ env.BUILD_RELEASE_DIR }} --target package

      - name: Upload Linux Packages (Clang only)
        if: ${{ inputs.compiler == 'clang' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linux-packages
          path: |
            ${{ env.BUILD_RELEASE_DIR }}/*.tar.gz
            ${{ env.BUILD_RELEASE_DIR }}/*.tgz
            ${{ env.BUILD_RELEASE_DIR }}/*.deb
