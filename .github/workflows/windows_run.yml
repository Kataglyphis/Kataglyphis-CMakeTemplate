# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on Windows MSVC/Clang x64

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  CLANG_VERSION: 21.1.1
  LLVM_BIN: 'C:\Program Files\LLVM\bin'

jobs:
  build:
    runs-on: windows-2025

    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Add LLVM to PATH
        run: echo "${{ env.LLVM_BIN }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install deps
        run: |
          ./Scripts/Windows/setup-dependencies.ps1 -ClangVersion ${{ env.CLANG_VERSION }}
          cppcheck --version

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build --preset x64-MSVC-Windows-Debug

      - name: Build
        run: cmake --build ${{github.workspace}}/build --preset x64-MSVC-Windows-Debug

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest

      - name: Prepare for clang
        run: |
          Remove-Item -Path ${{github.workspace}}/build -Recurse -Force
          clang --version

      - name: Configure CMake with Clang
        run: cmake -B ${{github.workspace}}/build --preset x64-Clang-Windows-Profile -Dmyproject_ENABLE_CPPCHECK="OFF"

      - name: Build for Clang
        run: |
          $cores = [Environment]::ProcessorCount
          $Env:CMAKE_BUILD_PARALLEL_LEVEL = $cores
          Write-Host "CMAKE_BUILD_PARALLEL_LEVEL is set to $Env:CMAKE_BUILD_PARALLEL_LEVEL"
          cmake --build ${{github.workspace}}/build --preset x64-Clang-Windows-Profile

      - name: Test on Clang
        working-directory: ${{github.workspace}}/build
        run: |
          ctest
          & "llvm-profdata.exe" merge -sparse "${{github.workspace}}\build\Test\compile\default.profraw" -o "${{github.workspace}}\build\compileTestSuite.profdata"
          & "llvm-cov.exe" report "${{github.workspace}}\build\compileTestSuite.exe" -instr-profile="${{github.workspace}}\build\compileTestSuite.profdata"
          & "llvm-cov.exe" export "${{github.workspace}}\build\compileTestSuite.exe" -format=text -instr-profile="${{github.workspace}}\build\compileTestSuite.profdata" | Out-File -FilePath "${{github.workspace}}\build\coverage.json" -Encoding UTF8

      - name: Run performance benchmarks
        run: |
          & .\build\perfTestSuite.exe

      - name: Run LLVM Source based Code Coverage
        run: |
          Push-Location "${{github.workspace}}\build"
          $Env:LLVM_PROFILE_FILE = "${{github.workspace}}\build\dummy.profraw"
          & ".\KataglyphisCppProject.exe"
          & "llvm-profdata.exe" merge -sparse "${{github.workspace}}\build\dummy.profraw" -o "${{github.workspace}}\build\dummy.profdata"
          & "llvm-cov.exe" show ".\KataglyphisCppProject.exe" -instr-profile="${{github.workspace}}\build\dummy.profdata" -format=text
          Pop-Location

      - name: Configure CMake for Release (Clang only)
        run: cmake -B build_release --preset x64-Clang-Windows-Release -Dmyproject_ENABLE_CPPCHECK="OFF"

      - name: Build Release (Clang only)
        shell: pwsh
        run: |
          $env:CMAKE_BUILD_PARALLEL_LEVEL = $env:NUMBER_OF_PROCESSORS
          cmake --build build_release --preset x64-Clang-Windows-Release

      - name: Package (Clang only)
        run: cmake --build build_release --preset x64-Clang-Windows-Release --target package