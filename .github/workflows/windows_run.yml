name: CMake on Windows MSVC/Clang x64

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BUILD_DIR: "${{github.workspace}}/build"
  BUILD_DIR_RELEASE: "${{github.workspace}}/build_release"
  CLANG_VERSION: 21.1.1
  LLVM_BIN: 'C:\Program Files\LLVM\bin'
  CLANG_PROFILE_PRESET: linux-profile-clang

defaults:
  run:
    shell: pwsh # Set PowerShell as default shell for all steps

jobs:
  build:
    runs-on: windows-2025

    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
      
      #################################################################################################################
      ######################################## Prepare deps ###########################################################
      #################################################################################################################
 
      - name: Install dependencies
        run: |
          ./scripts/windows/setup-dependencies.ps1 `
            -ClangVersion ${{ env.CLANG_VERSION }}
      
      #################################################################################################################
      ####################### Run unit/integration/coverage/tests/static analyzers ####################################
      #################################################################################################################
      
      ########################################## MSVC #################################################################
      - name: Configure/Build CMake Debug (MSVC)
        run: |
          cmake -B ${{ env.BUILD_DIR }} --preset x64-MSVC-Windows-Debug
          cmake --build ${{ env.BUILD_DIR }} --preset x64-MSVC-Windows-Debug

      - name: Test (MSVC)
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest

      ########################################## CLANG-CL #############################################################
      - name: Prepare for Clang
        run: |
          Remove-Item -Path ${{ env.BUILD_DIR }} -Recurse -Force
          clang --version
        shell: pwsh

      - name: Configure CMake Build Debug (Clang)
        # cppcheck has a weired bug in windows-2025 ... at least last time i tested so turn it off for now
        run: |
          cmake -B ${{ env.BUILD_DIR }} --preset x64-ClangCL-Windows-Debug -Dmyproject_ENABLE_CPPCHECK=OFF
          cmake --build ${{ env.BUILD_DIR }} --preset x64-ClangCL-Windows-Debug

      - name: Test (Clang)
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest
          & "llvm-profdata.exe" merge -sparse "Test\compile\default.profraw" -o "compileTestSuite.profdata"
          & "llvm-cov.exe" report "compileTestSuite.exe" -instr-profile="compileTestSuite.profdata"
          & "llvm-cov.exe" export "compileTestSuite.exe" -format=text -instr-profile="compileTestSuite.profdata" | Out-File -FilePath "coverage.json" -Encoding UTF8
          & "llvm-cov.exe" show "compileTestSuite.exe" -instr-profile="compileTestSuite.profdata"

      - name: Run clang-tidy
        shell: pwsh
        run: |
          $sourceFiles = Get-ChildItem -Path "Src" -Recurse -Include "*.cpp", "*.cc" | ForEach-Object { $_.FullName }
          clang-tidy -p="./${{ env.BUILD_DIR }}/compile_commands.json" $sourceFiles

      - name: Run Clang static analysis (HTML)
        shell: pwsh
        run: |
          # HTML output (correct flag form)
          $sourceFiles = Get-ChildItem -Path "Src" -Recurse -Include "*.cpp", "*.cc" | ForEach-Object { $_.FullName }
          clang++ --analyze -Xanalyzer -analyzer-output=html $sourceFiles

      - name: Run Clang static analysis (scan-build)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "scan-build-reports" -Force
          scan-build -o scan-build-reports cmake --build "$env:WORKSPACE/$env:BUILD_DIR" --preset "$env:CLANG_DEBUG_PRESET"

      #################################################################################################################
      ############################# Now run on performance benchmarking/profiling #####################################
      #################################################################################################################
      - name: Prepare for Profiling
        run: |
          Remove-Item -Path ${{ env.BUILD_DIR }} -Recurse -Force
          clang --version
        shell: pwsh

      - name: Configure/build CMake for Profiling (select preset by compiler)
        shell: pwsh
        run: |
          $PRESET = $env:CLANG_PROFILE_PRESET
          Write-Output "Using preset: $PRESET"
          cmake -B "$env:GITHUB_WORKSPACE/$env:BUILD_DIR" --preset "$PRESET"
          cmake --build "$env:GITHUB_WORKSPACE/$env:BUILD_DIR" --preset "$PRESET"

      - name: Run performance benchmarks
        working-directory: ${{ env.BUILD_DIR }}
        run: .\perfTestSuite.exe

      - name: Run Instrumentation-based PGO Clang/LLVM
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          $Env:LLVM_PROFILE_FILE = "dummy.profraw"
          & ".\KataglyphisCppProject.exe"
          & "llvm-profdata.exe" merge -sparse "dummy.profraw" -o "dummy.profdata"
          & "llvm-cov.exe" show ".\KataglyphisCppProject.exe" -instr-profile="dummy.profdata" -format=text

      #################################################################################################################
      ################################### Now run release and build package for clang #################################
      #################################################################################################################

      - name: Configure and Build CMake for Release (ClangCL)
        run: |
          cmake -B ${{ env.BUILD_DIR_RELEASE }} --preset x64-ClangCL-Windows-Release -Dmyproject_ENABLE_CPPCHECK=OFF
          cmake --build ${{ env.BUILD_DIR_RELEASE }} --preset x64-ClangCL-Windows-Release

      - name: Package (Clang)
        run: cmake --build ${{ env.BUILD_DIR_RELEASE }} --preset x64-ClangCL-Windows-Release --target package

      - name: Upload Installers & Zip
        uses: actions/upload-artifact@v4.6.2
        with:
          name: windows-installers
          path: |
            ${{ env.BUILD_DIR_RELEASE }}/*.msi
            ${{ env.BUILD_DIR_RELEASE }}/*.exe
            ${{ env.BUILD_DIR_RELEASE }}/*.zip
