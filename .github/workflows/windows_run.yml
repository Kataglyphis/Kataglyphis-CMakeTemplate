name: CMake on Windows MSVC/Clang x64

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BUILD_DIR: "${{github.workspace}}/build"
  BUILD_DIR_RELEASE: "${{github.workspace}}/build_release"
  CLANG_VERSION: 21.1.1
  LLVM_BIN: 'C:\Program Files\LLVM\bin'

defaults:
  run:
    shell: pwsh # Set PowerShell as default shell for all steps

jobs:
  build:
    runs-on: windows-2025

    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Add LLVM to PATH
        run: echo "${{ env.LLVM_BIN }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install dependencies
        run: |
          ./scripts/windows/setup_dependencies.ps1 -ClangVersion ${{ env.CLANG_VERSION }}
          cppcheck --version

      - name: Configure CMake (MSVC)
        run: cmake -B ${{ env.BUILD_DIR }} --preset x64-MSVC-Windows-Debug

      - name: Build (MSVC)
        run: |
          $env:CMAKE_BUILD_PARALLEL_LEVEL = [Environment]::ProcessorCount
          cmake --build ${{ env.BUILD_DIR }} --preset x64-MSVC-Windows-Debug
        shell: pwsh

      - name: Test (MSVC)
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest

      - name: Prepare for Clang
        run: |
          Remove-Item -Path ${{ env.BUILD_DIR }} -Recurse -Force
          clang --version
        shell: pwsh

      - name: Configure CMake (Clang)
        # cppcheck has a weired bug in windows-2025 ... at least last time i tested so turn it off for now
        run: cmake -B ${{ env.BUILD_DIR }} --preset x64-Clang-Windows-Debug -Dmyproject_ENABLE_CPPCHECK=OFF

      - name: Build (Clang)
        run: |
          $env:CMAKE_BUILD_PARALLEL_LEVEL = [Environment]::ProcessorCount
          cmake --build ${{ env.BUILD_DIR }} --preset x64-Clang-Windows-Debug
        shell: pwsh

      - name: Test (Clang)
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest
          & "llvm-profdata.exe" merge -sparse "Test\compile\default.profraw" -o "compileTestSuite.profdata"
          & "llvm-cov.exe" report "compileTestSuite.exe" -instr-profile="compileTestSuite.profdata"
          & "llvm-cov.exe" export "compileTestSuite.exe" -format=text -instr-profile="compileTestSuite.profdata" | Out-File -FilePath "coverage.json" -Encoding UTF8

      - name: Run performance benchmarks
        working-directory: ${{ env.BUILD_DIR }}
        run: .\perfTestSuite.exe

      - name: Run LLVM Source-based Code Coverage
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          $Env:LLVM_PROFILE_FILE = "dummy.profraw"
          & ".\KataglyphisCppProject.exe"
          & "llvm-profdata.exe" merge -sparse "dummy.profraw" -o "dummy.profdata"
          & "llvm-cov.exe" show ".\KataglyphisCppProject.exe" -instr-profile="dummy.profdata" -format=text

      - name: Configure CMake for Release (Clang)
        run: cmake -B ${{ env.BUILD_DIR_RELEASE }} --preset x64-Clang-Windows-Release -Dmyproject_ENABLE_CPPCHECK=OFF

      - name: Build Release (Clang)
        run: |
          $env:CMAKE_BUILD_PARALLEL_LEVEL = $env:NUMBER_OF_PROCESSORS
          cmake --build ${{ env.BUILD_DIR_RELEASE }} --preset x64-Clang-Windows-Release
        shell: pwsh

      - name: Package (Clang)
        run: cmake --build ${{ env.BUILD_DIR_RELEASE }} --preset x64-Clang-Windows-Release --target package

      - name: Upload Installers & Zip
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            ${{ env.BUILD_DIR_RELEASE }}/*.msi
            ${{ env.BUILD_DIR_RELEASE }}/*.exe
            ${{ env.BUILD_DIR_RELEASE }}/*.zip